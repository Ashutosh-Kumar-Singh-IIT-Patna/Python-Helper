Mutable: Can be changed after creation
Examples: list, dict, set, custom class instances

lst = [1, 2, 3]
lst[0] = 100  # OK
print(lst)    # [100, 2, 3]


Immutable: Cannot be changed after creation
Examples: int, float, str, tuple

x = 10
x = x + 1  # New object created
print(x)   # 11

s = "hello"
s = s.upper()  # Returns a new string


Variables are references, not values.
a = [1, 2, 3]
b = a       # b points to the same list

b[0] = 999
print(a)    # [999, 2, 3] — `a` also changed!

| Type         | Description                                               |
| ------------ | --------------------------------------------------------- |
| Shallow Copy | New outer object, but inner elements are still references |
| Deep Copy    | Recursively copies all nested objects                     |

Shallow Copy Example:
import copy

original = [[1, 2], [3, 4]]
shallow = copy.copy(original)

shallow[0][0] = 999
print(original)  # [[999, 2], [3, 4]] — original changed!


Deep Copy Example:
deep = copy.deepcopy(original)

deep[0][0] = 111
print(original)  # [[999, 2], [3, 4]] — original unchanged
print(deep)      # [[111, 2], [3, 4]]


| Concept  | Operator | Meaning                              |
| -------- | -------- | ------------------------------------ |
| Identity | `is`     | Same memory reference (like pointer) |
| Equality | `==`     | Same value                           |

x = [1, 2]
y = [1, 2]

print(x == y)   # True
print(x is y)   # False (different objects)


Immutable Elements (like int):
a = [1, 2]         # list of integers (immutable)
b = a.copy()       # shallow copy
b[0] = 99
print(a)           # [1, 2] ✅ not affected

a and b are two different lists
integers are immutable
so b[0] = 99 replaces the reference at index 0 in b
it does not modify any shared object — it just points to a new value


Mutable Elements (like list):
a = [[1, 2], [3, 4]]   # list of lists (inner lists are mutable)
b = a.copy()           # shallow copy
b[0][0] = 99
print(a)               # [[99, 2], [3, 4]] ❌ affected!

a[0] and b[0] both point to the same inner list
so changing b[0][0] modifies the original inner list