Customize how your objects behave with built-in operations (like printing, adding, comparing, etc.)

class Person:
    def __init__(self, name):
        self.name = name

p = Person("Ash")
print(p.name)  # Ash

class Person:
    def __init__(self, name): self.name = name
    def __str__(self): return f"Person({self.name})"

print(Person("Ash"))  # Person(Ash)


class Point:
    def __init__(self, x): self.x = x
    def __repr__(self): return f"Point(x={self.x})"

print(repr(Point(10)))  # Point(x=10)


class Box:
    def __init__(self, items): self.items = items
    def __len__(self): return len(self.items)

print(len(Box([1, 2, 3])))  # 3


class MyList:
    def __init__(self): self.data = [0, 1, 2]
    def __getitem__(self, index): return self.data[index]
    def __setitem__(self, index, value): self.data[index] = value

lst = MyList()
print(lst[1])  # 1
lst[1] = 100
print(lst[1])  # 100


class Person:
    def __init__(self, age): self.age = age
    def __eq__(self, other): return self.age == other.age

print(Person(20) == Person(20))  # True


class Vector:
    def __init__(self, x): self.x = x
    def __add__(self, other): return Vector(self.x + other.x)
    def __repr__(self): return f"Vector({self.x})"

print(Vector(3) + Vector(4))  # Vector(7)


class Counter:
    def __init__(self): self.i = 0
    def __iter__(self): return self
    def __next__(self):
        if self.i >= 3: raise StopIteration
        self.i += 1
        return self.i

for x in Counter(): print(x)  # 1 2 3

