class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

#       10
#      /  \
#     5    20
root = Node(10)
root.left = Node(5)
root.right = Node(20)


def inorder(node):
    if node:
        inorder(node.left)
        print(node.value, end=" ")
        inorder(node.right)


from collections import deque

def level_order(root):
    if not root:
        return
    q = deque([root])
    while q:
        curr = q.popleft()
        print(curr.value, end=" ")
        if curr.left:
            q.append(curr.left)
        if curr.right:
            q.append(curr.right)


def inorder_iterative(root):
    stack = []
    curr = root
    while stack or curr:
        while curr:
            stack.append(curr)
            curr = curr.left
        curr = stack.pop()
        print(curr.value, end=" ")
        curr = curr.right
