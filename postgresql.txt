CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

SERIAL: Auto-incrementing integer.
PRIMARY KEY: Uniquely identifies a row.

INSERT INTO users (username, email) VALUES
('ash', 'ash@example.com'),
('bob', 'bob@example.com');

SELECT * FROM users;
SELECT username FROM users WHERE id = 1;

UPDATE users SET email = 'new@example.com' WHERE username = 'ash';

DELETE FROM users WHERE id = 2;

CREATE TABLE posts (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    title TEXT,
    body TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO posts (user_id, title, body) VALUES
(1, 'Hello World', 'This is my first post'),
(1, 'Another Post', 'More content here'),
(2, 'Bob’s Post', 'Bob wrote this');

INNER JOIN (only matching records):
SELECT users.username, posts.title
FROM users
JOIN posts ON users.id = posts.user_id;

LEFT JOIN (all users, even without posts):
SELECT users.username, posts.title
FROM users
LEFT JOIN posts ON users.id = posts.user_id;

Aggregate: Count Posts per User:
SELECT users.username, COUNT(posts.id) AS post_count
FROM users
LEFT JOIN posts ON users.id = posts.user_id
GROUP BY users.username;


SELECT u.username, p.title
FROM users u
JOIN posts p ON u.id = p.user_id
WHERE p.title ILIKE '%hello%';

ILIKE is a case-insensitive version of the LIKE operator in PostgreSQL.
This will match all rows where the title contains "hello", regardless of case — like:
"Hello world"
"hello world"
"HELLO"
"hElLo"
