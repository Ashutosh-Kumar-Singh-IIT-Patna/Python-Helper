import threading

def download(name):
    print(f"{name} downloading...")

t1 = threading.Thread(target=download, args=("Thread 1",))
t2 = threading.Thread(target=download, args=("Thread 2",))
t1.start()
t2.start()
t1.join()
t2.join()


from concurrent.futures import ThreadPoolExecutor

def fetch_url(url):
    # Simulate download
    return f"Fetched {url}"

with ThreadPoolExecutor() as executor:
    results = executor.map(fetch_url, ["a.com", "b.com", "c.com"])
    print(list(results))


def greet(name):
    return f"Hello, {name}"

with ThreadPoolExecutor(max_workers=2) as executor:
    future1 = executor.submit(greet, "Alice")
    future2 = executor.submit(greet, "Bob")
    print(future1.result())  # Hello, Alice
    print(future2.result())  # Hello, Bob


import time
def wait_and_return(n):
    time.sleep(n)
    return n

with ThreadPoolExecutor(max_workers=3) as executor:
    futures = [executor.submit(wait_and_return, i) for i in [3, 2, 1]]
    for future in as_completed(futures):
        print(future.result())


def compute(x):
    return x * 10

def on_done(future):
    print("Result is:", future.result())

with ThreadPoolExecutor() as executor:
    f = executor.submit(compute, 5)
    f.add_done_callback(on_done)


import random

def process(data):
    return f"Processed {data}"

with ThreadPoolExecutor(max_workers=2) as executor:
    futures = []
    for i in range(5):
        data = random.randint(1, 100)
        futures.append(executor.submit(process, data))

    for f in futures:
        print(f.result())
